#!/bin/bash

set -e

scriptPath="$(readlink -f "$0")"
scriptDir="$(dirname "${scriptPath}")"
cd "${scriptDir}/.." || exit 1

namespace=''
targetCluster=''
while getopts u:n:c:h option
do
	case "${option}" in
		n) namespace=${OPTARG};;
		u) user=${OPTARG};;
		c) targetCluster=${OPTARG};;
		h)
			echo -e "Usage:\n\n    "$(basename "${scriptPath}")" -n [namespace] -c [target_cluster] -u [user]\n\n"
			exit 0
			;;
		*) exit 1
			;;
	esac
done

if [[ "${user}" == "" ]]; then
	echo "User name must be specified."
	"${scriptPath}" -h
	exit 1
fi

case "${targetCluster}" in
	"dev" )
		targetCluster=cluster-dev
		;;
	"prod" )
		targetCluster=cluster-prod
		;;
	*)
		echo "Invalid target cluster. Supported cluster values are \"dev\" or \"prod\"."
		"${scriptPath}" -h
		exit 1
esac


export KUBECONFIG_TEMPLATE="./private/infrastructure/${targetCluster}/.kube/config"
export KUBECONFIG="./active.kubeconfig"
# Copy kubeconfig to a temporary file to ignore changes caused by kubectl
cp "${KUBECONFIG_TEMPLATE}" "${KUBECONFIG}" || exit 1

context="${user}@${targetCluster}"
kubectl config use-context "${context}"

kapp deploy --diff-changes -a registry-auth -n "${namespace}" -f ./infrastructure/common/registry-auth.yaml

# Clean up temporary kubeconfig
rm "${KUBECONFIG}"

exit 0
